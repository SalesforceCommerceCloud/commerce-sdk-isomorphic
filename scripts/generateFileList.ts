/*
 * Copyright (c) 2025, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import * as fs from 'fs';
import * as path from 'path';

/**
 * Script to generate API names and common dependencies arrays from src/lib directory
 * Used by rollup.config.js for individual API bundle generation
 */
function generateFileList(): void {
  const srcLibPath = path.join(__dirname, '..', 'src', 'lib');
  const outputPath = path.join(__dirname, 'fileList.ts');

  // Find all directories in src/lib (these are the API names)
  const apiNames: string[] = [];
  const commonDependencies: Array<{input: string; file: string}> = [];

  try {
    const items = fs.readdirSync(srcLibPath);

    items.forEach((item: string) => {
      const fullPath = path.join(srcLibPath, item);
      const fileStats = fs.statSync(fullPath);

      if (fileStats.isDirectory()) {
        // Check if this directory has an index.ts file (API directories)
        const indexPath = path.join(fullPath, 'index.ts');
        if (fs.existsSync(indexPath)) {
          apiNames.push(item);
        }
      } else if (item.endsWith('.ts') && item !== 'index.ts') {
        // These are common dependency files (exclude index.ts)
        commonDependencies.push({
          input: `src/lib/${item}`,
          file: `lib/${item.replace('.ts', '.js')}`,
        });
      }
    });
  } catch (error) {
    console.error(`Error reading directory ${srcLibPath}:`, error);
  }

  // Create the output directory if it doesn't exist
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, {recursive: true});
  }

  // Generate the TypeScript file content
  const fileContent = `/*
 * Copyright (c) 2025, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/*
 * Auto-generated API names and common dependencies for rollup configuration
 * Generated by: scripts/generateFileList.ts
 *
 * This file contains API names and common dependencies from src/lib directory
 * and is used by rollup.config.js for individual API bundle generation
 */

const apiNames = [
${apiNames.map(name => `  '${name}'`).join(',\n')},
];

const commonDependencies = [
${commonDependencies
  .map(dep => `  {input: '${dep.input}', file: '${dep.file}'}`)
  .join(',\n')},
];

// Total APIs: ${apiNames.length}
// Total common dependencies: ${commonDependencies.length}

export {apiNames, commonDependencies};
`;

  // Write the file
  fs.writeFileSync(outputPath, fileContent, 'utf8');
}

// Run the script
if (require.main === module) {
  try {
    generateFileList();
  } catch (error) {
    console.error('Error generating file list:', error);
    process.exit(1);
  }
}
