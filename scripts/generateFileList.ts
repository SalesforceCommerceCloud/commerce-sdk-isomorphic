#!/usr/bin/env ts-node
/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import * as fs from 'fs';
import * as path from 'path';

/**
 * Recursively finds all TypeScript files in a directory
 * @param dir - Directory to search
 * @param basePath - Base path to prepend to file paths
 * @returns Array of file paths relative to basePath
 */
function findTsFiles(dir: string, basePath = ''): string[] {
  const files: string[] = [];

  try {
    const items = fs.readdirSync(dir);

    items.forEach((item: string) => {
      const fullPath = path.join(dir, item);
      const relativePath = path.join(basePath, item);
      const fileStats = fs.statSync(fullPath);

      if (fileStats.isDirectory()) {
        // Recursively search subdirectories
        files.push(...findTsFiles(fullPath, relativePath));
      } else if (item.endsWith('.ts')) {
        // Add TypeScript files to the list
        files.push(relativePath);
      }
    });
  } catch (error) {
    console.error(`Error reading directory ${dir}:`, error);
  }

  return files;
}

/**
 * Script to generate a static file list from src/lib directory
 * Used by rollup.config.js to code split the bundle for tree shaking
 */
function generateFileList(): void {
  const srcLibPath = path.join(__dirname, '..', 'src', 'lib');
  const outputPath = path.join(__dirname, '..', 'src', 'static', 'fileList.ts');

  // Find all TypeScript files
  const tsFiles = findTsFiles(srcLibPath);

  // Create the output directory if it doesn't exist
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, {recursive: true});
  }

  // Generate the TypeScript file content
  const fileContent = `/*
 * Copyright (c) 2025, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/*
 * Auto-generated file list for rollup configuration
 * Generated by: scripts/generateFileList.ts
 *
 * This file contains all TypeScript files from src/lib directory
 * and is used by rollup.config.js for ESM bundle generation
 */

const esmInputs = [
${tsFiles.map(file => `  'src/lib/${file}'`).join(',\n')},
];

// Total files: ${tsFiles.length}

export default esmInputs;
`;

  // Write the file
  fs.writeFileSync(outputPath, fileContent, 'utf8');

  console.log(`Generated file list written to: ${outputPath}`);
  console.log(`Total files: ${tsFiles.length}`);
}

// Run the script
if (require.main === module) {
  try {
    generateFileList();
  } catch (error) {
    console.error('Error generating file list:', error);
    process.exit(1);
  }
}
