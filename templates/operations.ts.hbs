{{#each encodes.endPoints}}
  {{#each operations}}
    /**
    * {{{formatForTsDoc description}}}
    *
    * If you would like to get a raw Response object use the other {{name}} function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request/queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#or (is method "patch") (is method "post") (is method "put")}}
    * @param body - The data to send as the request body.
    {{/or}}
    *
    * @returns A promise of type {{getReturnTypeFromOperation this}}.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request.queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        },
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}},
        body: {{{getPayloadTypeFromRequest request}}}{{/or}}
      }
    ): Promise<{{getReturnTypeFromOperation this}}>;

    /**
    * {{{formatForTsDoc description}}}
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request.queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#or (is method "patch") (is method "post") (is method "put")}}
    * @param body - The data to send as the request body.
    {{/or}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type {{getReturnTypeFromOperation this}} otherwise.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    {{name}}<T extends boolean>(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request.queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        },
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}},
        body: {{{getPayloadTypeFromRequest request}}}{{/or}}
      },
      rawResponse?: T
    ): Promise<T extends true ? Response : {{getReturnTypeFromOperation this}}>;

    /**
    * {{{formatForTsDoc description}}}
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request.queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#or (is method "patch") (is method "post") (is method "put")}}
    * @param body - The data to send as the request body.
    {{/or}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type {{getReturnTypeFromOperation this}} otherwise.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    async {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request.queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        },
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}},
        body: {{{getPayloadTypeFromRequest request}}}{{/or}}
      },
      rawResponse?: boolean,
    ): Promise<Response | {{getReturnTypeFromOperation this}}> {

      const parameters = (options && options.parameters) ? options.parameters : {} as {[key: string]: string};

      const pathParameters = {
      {{#each ../parameters}}
        "{{{name}}}": parameters["{{{name}}}"]
        {{! if it is a common path parameter, fallback to client config for undefined }}
        {{#if (isCommonPathParameter name)}} !== undefined ? parameters["{{{name}}}"] : this.clientConfig.parameters?.{{{name}}}{{/if}}
        {{#unless @last}},{{/unless}}
      {{/each}}
      };

      const queryParameters: { [key: string]: string } = {};
      (Object.keys(parameters) as Array<keyof typeof parameters>).forEach(key => {
        if (!(key in pathParameters)) {
          queryParameters[key] = parameters[key] as string;
        }
      });

      {{#each request.queryParameters}}
        {{! for queryParameters that are common query parameters, fallback to client config for undefined }}
        {{#if (isCommonQueryParameter name)}}
        queryParameters.{{{name}}} =
          queryParameters["{{{name}}}"] !== undefined
            ? String(parameters["{{{name}}}"]) : String(this.clientConfig.parameters?.{{{name}}});
        {{/if}}
      {{/each}}

      const url = new TemplateURL(
        "{{{../path}}}",
        this.clientConfig.baseUri,
        {
          pathParams: { version: 'v1', ...this.clientConfig.parameters, ...pathParameters },
          queryParams: { siteId: this.clientConfig.parameters?.siteId, ...queryParameters},
          origin: this.clientConfig?.proxy
        }
      );

      const headers = {
        "Content-Type": "application/json",
        ...this.clientConfig?.headers,
        ...options?.headers
      };

      const req = new Request(
        url.toString(),
        {
          ...this.clientConfig.fetchOptions,
          {{#or (is method "patch") (is method "post") (is method "put")}}body: JSON.stringify(options?.body),{{/or}}
          headers: headers,
          method: "{{loud method}}"
        }
      );
      const response = await fetch(req);
      if (rawResponse) {
        return response;
      } else {
        return response.json();
      }
    }

  {{/each}}
{{/each}}
