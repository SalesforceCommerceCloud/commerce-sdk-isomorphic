{{#each encodes.endPoints}}
  {{#each operations}}
    /**
    * {{{formatForTsDoc description}}}
    *
    * If you would like to get a raw Response object use the other {{name}} function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request/queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#if (isRequestWithPayload request)}}
    * @param body - The data to send as the request body.
    {{/if}}
    *
    * @returns A promise of type {{getReturnTypeFromOperation this}}.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
          {{#each ../parameters}}
          {{{name}}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request.queryParameters}}
          {{{name}}}{{#if (not (is required "true"))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        }, ConfigParameters>,
        headers?: { [key: string]: string },
        {{#if (isRequestWithPayload request)}}
        body: {{{getPayloadTypeFromRequest request}}}
        {{/if}}
      }>
    ): Promise<{{getReturnTypeFromOperation this}}>;

    /**
    * {{{formatForTsDoc description}}}
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request.queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#if (isRequestWithPayload request)}}
    * @param body - The data to send as the request body.
    {{/if}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    * @returns A promise of type Response if rawResponse is true, a promise of type {{getReturnTypeFromOperation this}} otherwise.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    {{name}}<T extends boolean>(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
          {{#each ../parameters}}
          {{{name}}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request.queryParameters}}
          {{{name}}}{{#if (not (is required "true"))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        }, ConfigParameters>,
        headers?: { [key: string]: string },
        {{#if (isRequestWithPayload request)}}
        body: {{{getPayloadTypeFromRequest request}}}
        {{/if}}
      }>,
      rawResponse?: T
    ): Promise<T extends true ? Response : {{getReturnTypeFromOperation this}}>;

    /**
    * {{{formatForTsDoc description}}}
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request.queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#if (isRequestWithPayload request)}}
    * @param body - The data to send as the request body.
    {{/if}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type {{getReturnTypeFromOperation this}} otherwise.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    async {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
          {{#each ../parameters}}
          {{{name}}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request.queryParameters}}
          {{{name}}}{{#if (not (is required "true"))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        }, ConfigParameters>,
        headers?: { [key: string]: string },
        {{#if (isRequestWithPayload request)}}
        body: {{{getPayloadTypeFromRequest request}}}
        {{/if}}
      }>,
      rawResponse?: boolean
    ): Promise<Response | {{getReturnTypeFromOperation this}}> {
      const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>["parameters"]>>);
      const configParams = this.clientConfig.parameters;

      const pathParams: {{{@root.name.upperCamelCase}}}PathParameters & Required<BaseUriParameters> = {
        {{!-- Base URI parameters are well known and unlikely to change, so they are hard-coded for simplicity  --}}
        shortCode: configParams.shortCode,
        version: configParams.version || "v1"
      };
      {{#each ../parameters}}
      if (optionParams["{{{name}}}"] !== undefined) {
        pathParams["{{{name}}}"] = optionParams["{{{name}}}"];
      } else if (configParams["{{{name}}}"] !== undefined) {
        pathParams["{{{name}}}"] = configParams["{{{name}}}"];
      }
      {{#if (is required "true")}}
      else {
        throw new Error('Missing required path parameter: {{{name}}}');
      }
      {{/if}}
      {{/each}}

      const queryParams: {{{@root.name.upperCamelCase}}}QueryParameters = {};
      {{#each request.queryParameters}}
      if (optionParams["{{{name}}}"] !== undefined) {
        queryParams["{{{name}}}"] = optionParams["{{{name}}}"];
      } else if (configParams["{{{name}}}"] !== undefined) {
        queryParams["{{{name}}}"] = configParams["{{{name}}}"];
      }
      {{#if (is required "true")}}
      else {
        throw new Error('Missing required query parameter: {{{name}}}');
      }
      {{/if}}
      {{/each}}

      const url = new TemplateURL(
        "{{{../path}}}",
        this.clientConfig.baseUri,
        {
          pathParams,
          queryParams,
          origin: this.clientConfig.proxy
        }
      );

      const headers: Record<string, string> = {
        {{#if (isRequestWithPayload request)}}
        "Content-Type": "{{{getMediaTypeFromRequest request}}}",
        {{/if}}
        ...this.clientConfig.headers,
        ...options?.headers
      };

      headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(" ");

      const req = new Request(
        url.toString(),
        {
          ...this.clientConfig.fetchOptions,
          {{#if (isRequestWithPayload request)}}body: this.clientConfig.transformRequest(options.body, headers),{{/if}}
          headers,
          method: "{{loud method}}"
        }
      );
      const response = await fetch(req);
      if (rawResponse) {
        return response;
      } else if (this.clientConfig.throwOnBadResponse && !response.ok && response.status !== 304) {
        throw new Error('Error ' + response.status + ': ' + response.statusText);
      }
      {{#unless (eq (getReturnTypeFromOperation this) "void") }}
        else {
          const text = await response.text();
          // It's ideal to get "{}" for an empty response body, but we won't throw if it's truly empty
          return text ? JSON.parse(text) : {};
        }
      {{/unless}}
    }
  {{/each}}
{{/each}}
