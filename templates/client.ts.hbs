import { fetch, Request }  from "cross-fetch";

import ClientConfig, { ClientConfigInit } from "./clientConfig";
import type {
  BaseUriParameters,
  CompositeParameters,
  RequireParametersUnlessAllAreOptional
} from "./helpers";
import TemplateURL from "./templateUrl";
import { USER_AGENT_HEADER, USER_AGENT_VALUE } from "./version";

{{#each dataTypes}}
  {{!-- TODO: Remove this special case handling once namespaced types are added --}}
  {{#if (eq (getValue name) "ResourceBadRequest")}}
// This is a known deviation from the RAML definition, required due to limitations in
// the SDK generation. The full definition will be included in the next major release.
export type ResourceBadRequest = { [key: string]: any };
  {{else if (or (isTypeDefinition this) (isArrayType this))}}
export type {{getValue name}} = {{> dtoPartial typeDto=this}}
  {{/if}}
  {{!-- There exists both a type `RangeFilter` and a trait `RangeFilter` in
  some APIs. This causes a name collision bug where the type is not included
  in the generated file. The bug was incorrectly "fixed" by including traits
  as types. They are not types, and will eventually be removed. --}}
  {{#if (isTraitDefinition this)}}
    {{#if (isAllowedTrait this) }}
    {{!-- Because we know that a trait "type" is either (a) unused or (b) replacing
    a real type whose definition we have lost, we don't want to be restrictive --}}
type {{getValue name}} = { [key: string]: any }
    {{else}}
      {{log "Cannot convert invalid trait to type:" (getValue name) lavel="warn"}}
    {{/if}}
  {{/if}}
{{/each}}

/**
 * All path parameters that are used by at least one {{{name.upperCamelCase}}} method.
 */
export type {{name.upperCamelCase}}PathParameters = {
{{#each (getPathParameterTypeMapFromEndpoints model.encodes.endPoints)}}
  {{{@key}}}?: {{{this}}};
{{/each}}
}
/**
 * All query parameters that are used by at least one {{{name.upperCamelCase}}} method.
 */
export type {{name.upperCamelCase}}QueryParameters = {
{{#each (getQueryParameterTypeMapFromEndpoints model.encodes.endPoints)}}
  {{{@key}}}?: {{{this}}};
{{/each}}
}

/**
 * All parameters that are used by {{{name.upperCamelCase}}}.
 */
export type {{name.upperCamelCase}}Parameters = {{name.upperCamelCase}}PathParameters & BaseUriParameters & {{name.upperCamelCase}}QueryParameters;

/**
* [{{{metadata.name}}}](https://developer.commercecloud.com/s/api-details/{{{getObjectIdByAssetId metadata.assetId}}})
* ==================================
*
* *{{metadata.description}}*<br />
*
* Simple example:
*
* ```typescript
*   import { {{name.upperCamelCase}} } from "commerce-sdk-isomorphic";
*
*   const clientConfig = {
*     parameters: {
*       clientId: "XXXXXX",
*       organizationId: "XXXX",
*       shortCode: "XXX",
*       siteId: "XX"
*     }
*   };
*   const {{name.lowerCamelCase}}Client = new {{name.upperCamelCase}}(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: {{metadata.version}}<br />
* Last Updated: {{metadata.updatedDate}}<br />  
* </span>
{{#if (eq (lowercase metadata.categories.[CC Version Status].[0]) "beta")}}
* @beta 
* {{/if}}
* 

*/
export class {{name.upperCamelCase}}<ConfigParameters extends {{{name.upperCamelCase}}}Parameters & Record<string, unknown>> {
  // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
  public clientConfig: ClientConfig<ConfigParameters> & { baseUri: string };

  static readonly defaultBaseUri = "{{getBaseUriFromDocument model}}";

  constructor(config: ClientConfigInit<ConfigParameters>) {
    const cfg = {...config}
    if (!cfg.baseUri) cfg.baseUri = new.target.defaultBaseUri;
    // Type assertion is safe because ^^^
    this.clientConfig = new ClientConfig(cfg) as ClientConfig<ConfigParameters> & { baseUri: string };
  }

  {{> operationsPartial model}}

}
