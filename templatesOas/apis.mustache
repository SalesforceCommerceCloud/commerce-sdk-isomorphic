import ClientConfig, { ClientConfigInit } from "../../clientConfig";
// Must not import from ./helpers/index to avoid circular dependency via ShopperLogin
import { isBrowser } from "../../helpers/environment";
import { defaultBaseUri as currentBaseUri } from "../runtime";
import { doFetch } from "../../helpers/fetchHelper";
import type {
    BaseUriParameters,
    CompositeParameters,
    CustomRequestBody,
    QueryParameters,
    RequireParametersUnlessAllAreOptional,
} from "../../helpers/types";
import TemplateURL from "../../templateUrl";
import { USER_AGENT_HEADER, USER_AGENT_VALUE } from "../../version";

import type {
    {{#imports}}
    {{className}},
    {{/imports}}
} from '../models/index{{importFileExtension}}';

{{#hasEnums}}
{{#operations}}
{{#operation}}
{{#vendorExtensions}}
{{^x-scapi-internal}}
{{#allParams}}
{{#isEnum}}
{{#stringEnums}}
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
}
{{/stringEnums}}
{{^stringEnums}}

export type {{operationIdCamelCase}}{{enumName}} =
{{#allowableValues}}
    {{#enumVars}}
    {{{value}}}{{^-last}} |{{/-last}}{{#-last}};{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
{{/stringEnums}}
{{/isEnum}}
{{/allParams}}
{{/x-scapi-internal}}
{{/vendorExtensions}}
{{^vendorExtensions}}
{{#allParams}}
{{#isEnum}}
{{#stringEnums}}
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
}
{{/stringEnums}}
{{^stringEnums}}

export type {{operationIdCamelCase}}{{enumName}} =
{{#allowableValues}}
    {{#enumVars}}
    {{{value}}}{{^-last}} |{{/-last}}{{#-last}};{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
{{/stringEnums}}
{{/isEnum}}
{{/allParams}}
{{/vendorExtensions}}
{{/operation}}
{{/operations}}
{{/hasEnums}}

{{#operations}}
{{#operation}}
{{#vendorExtensions}}
{{^x-scapi-internal}}
export type {{nickname}}QueryParameters = {
    {{#queryParams}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{dataType}}}{{/isEnum}}{{^isEnum}}{{#hasReadOnly}}Omit<{{{dataType}}}, {{#readOnlyVars}}'{{baseName}}'{{^-last}}|{{/-last}}{{/readOnlyVars}}>{{/hasReadOnly}}{{^hasReadOnly}}{{{dataType}}}{{/hasReadOnly}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
    {{/queryParams}}
}

export type {{nickname}}PathParameters = {
    {{#pathParams}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{#hasReadOnly}}Omit<{{{dataType}}}, {{#readOnlyVars}}'{{baseName}}'{{^-last}}|{{/-last}}{{/readOnlyVars}}>{{/hasReadOnly}}{{^hasReadOnly}}{{{dataType}}}{{/hasReadOnly}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
    {{/pathParams}}
}
{{/x-scapi-internal}}
{{/vendorExtensions}}
{{^vendorExtensions}}
export type {{nickname}}QueryParameters = {
    {{#queryParams}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{dataType}}}{{/isEnum}}{{^isEnum}}{{#hasReadOnly}}Omit<{{{dataType}}}, {{#readOnlyVars}}'{{baseName}}'{{^-last}}|{{/-last}}{{/readOnlyVars}}>{{/hasReadOnly}}{{^hasReadOnly}}{{{dataType}}}{{/hasReadOnly}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
    {{/queryParams}}
}

export type {{nickname}}PathParameters = {
    {{#pathParams}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{#hasReadOnly}}Omit<{{{dataType}}}, {{#readOnlyVars}}'{{baseName}}'{{^-last}}|{{/-last}}{{/readOnlyVars}}>{{/hasReadOnly}}{{^hasReadOnly}}{{{dataType}}}{{/hasReadOnly}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
    {{/pathParams}}
}
{{/vendorExtensions}}
{{/operation}}
{{/operations}}

/**
 * All path parameters that are used by at least one {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}} method.
 */
export type {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}PathParameters = Partial<
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions}}
    {{^x-scapi-internal}}
    {{nickname}}PathParameters &
    {{/x-scapi-internal}}
    {{/vendorExtensions}}
    {{^vendorExtensions}}
    {{nickname}}PathParameters &
    {{/vendorExtensions}}
    {{/operation}}
    {{/operations}}
    {} {{! We have this to avoid trailing a `&`, due to x-scapi-internal we can't use the `last` keyword}}
>;

/**
 * All query parameters that are used by at least one {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}} method.
 */
export type {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}QueryParameters = Partial<
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions}}
    {{^x-scapi-internal}}
    {{nickname}}QueryParameters &
    {{/x-scapi-internal}}
    {{/vendorExtensions}}
    {{^vendorExtensions}}
    {{nickname}}QueryParameters &
    {{/vendorExtensions}}
    {{/operation}}
    {{/operations}}
    {} {{! We have this to avoid trailing a `&`, due to x-scapi-internal we can't use the `last` keyword}}
>;

/**
 * All parameters that are used by {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}.
 */
export type {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}Parameters = {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}PathParameters & BaseUriParameters & {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}QueryParameters;

{{#operations}}
{{#operation}}
{{#vendorExtensions}}
{{^x-scapi-internal}}
{{#hasFormParams}}
export type {{nickname}}BodyType = {
    {{#formParams}}
    {{#isFormParam}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{dataType}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
    {{/isFormParam}}
    {{/formParams}}
}

{{/hasFormParams}}
{{/x-scapi-internal}}
{{/vendorExtensions}}
{{^vendorExtensions}}
{{#hasFormParams}}
export type {{nickname}}BodyType = {
    {{#formParams}}
    {{#isFormParam}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{dataType}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
    {{/isFormParam}}
    {{/formParams}}
}

{{/hasFormParams}}
{{/vendorExtensions}}
{{/operation}}
{{/operations}}
/**
* [{{appName}}](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta={{#lambda.kebabcase}}{{appName}}{{/lambda.kebabcase}}:Summary)
* ==================================
*
* *{{{unescapedAppDescription}}}*<br />
*
* Simple example:
*
* ```typescript
*   import { {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}} } from "commerce-sdk-isomorphic";
*
*   const clientConfig = {
*     parameters: {
*       clientId: "XXXXXX",
*       organizationId: "XXXX",
*       shortCode: "XXX",
*       siteId: "XX"
*     }
*   };
*   const {{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}Client = new {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.33<br />
* Last Updated: <br />
* </span>
* 
*
*/
export class {{#vendorExtensions}}{{#x-sdk-classname}}{{{ . }}}{{/x-sdk-classname}}{{^x-sdk-classname}}{{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}{{/x-sdk-classname}}{{/vendorExtensions}}{{^vendorExtensions}}{{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}{{/vendorExtensions}}<ConfigParameters extends {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}Parameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    public clientConfig: ClientConfig<ConfigParameters> & { baseUri: string };

    static readonly defaultBaseUri = currentBaseUri;

    static readonly apiPaths = {
        {{#operations}}
        {{#operation}}
        {{#vendorExtensions}}
        {{^x-scapi-internal}}
        {{nickname}}: "{{path}}",
        {{/x-scapi-internal}}
        {{/vendorExtensions}}
        {{^vendorExtensions}}
        {{nickname}}: "{{path}}",
        {{/vendorExtensions}}
        {{/operation}}
        {{/operations}}
    }

    constructor(config: ClientConfigInit<ConfigParameters>) {
        const cfg = {...config}
        if (!cfg.baseUri) cfg.baseUri = new.target.defaultBaseUri;
        // Type assertion is safe because ^^^
        this.clientConfig = new ClientConfig(cfg) as ClientConfig<ConfigParameters> & { baseUri: string };
    }

    static readonly paramKeys = {
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions}}
    {{^x-scapi-internal}}
        {{nickname}}: [
            {{#allParams}}
            {{^isBodyParam}}
            {{^isHeaderParam}}
            '{{paramName}}',
            {{/isHeaderParam}}
            {{/isBodyParam}}
            {{/allParams}}
        ],
        {{nickname}}Required: [
            {{#allParams}}
            {{^isBodyParam}}
            {{^isHeaderParam}}
            {{#required}}
            '{{paramName}}',
            {{/required}}
            {{/isHeaderParam}}
            {{/isBodyParam}}
            {{/allParams}}
        ],
    {{/x-scapi-internal}}
    {{/vendorExtensions}}
    {{^vendorExtensions}}
        {{nickname}}: [
            {{#allParams}}
            {{^isBodyParam}}
            {{^isHeaderParam}}
            '{{paramName}}',
            {{/isHeaderParam}}
            {{/isBodyParam}}
            {{/allParams}}
        ],
        {{nickname}}Required: [
            {{#allParams}}
            {{^isBodyParam}}
            {{^isHeaderParam}}
            {{#required}}
            '{{paramName}}',
            {{/required}}
            {{/isHeaderParam}}
            {{/isBodyParam}}
            {{/allParams}}
        ],
    {{/vendorExtensions}}
    {{/operation}}
    {{/operations}}
    } as const;

{{#operations}}
{{#operation}}
{{#vendorExtensions}}
{{^x-scapi-internal}}

    /**
    * {{{unescapedNotes}}}
    *
    * If you would like to get a raw Response object use the other {{nickname}} function.
    *
    * @param options - An object containing the options for this method.
    * @param options.parameters - An object containing the parameters for this method.
    {{#allParams}}
    {{^isBodyParam}}
    {{^isHeaderParam}}
    {{^isFormParam}}
    * @param options.parameters.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/isHeaderParam}}
    {{/isBodyParam}}
    {{/allParams}}
    * @param options.headers - An object literal of key value pairs of the headers to be sent with this request.
    {{#hasBodyParam}}
    * @param options.body - The data to send as the request body.
    {{/hasBodyParam}}
    {{^hasBodyParam}}
    {{#hasFormParams}}
    * @param options.body - The data to send as the request body.
    {{#formParams}}
    {{#isFormParam}}
    * @param options.body.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/formParams}}
    {{/hasFormParams}}
    {{/hasBodyParam}}
    *
    * @returns A promise of type {{{returnType}}}{{^returnType}}void{{/returnType}}.
    */
    {{nickname}}(
        options{{^hasBodyParam}}?{{/hasBodyParam}}: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
            {{#allParams}}
            {{^isBodyParam}}
            {{^isHeaderParam}}
            {{^isFormParam}}
                {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
            {{/isFormParam}}
            {{/isHeaderParam}}
            {{/isBodyParam}}
            {{/allParams}}
            } & QueryParameters, ConfigParameters>
            headers?: { [key: string]: string },
            {{#hasBodyParam}}
            {{#bodyParam}}
            body: {{{dataType}}} & CustomRequestBody
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            body: {{nickname}}BodyType & CustomRequestBody
            {{/hasFormParams}}
            {{/hasBodyParam}}
        }>
    ): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}>;

    /**
    * {{{unescapedNotes}}}
    *
    * @param options - An object containing the options for this method.
    * @param options.parameters - An object containing the parameters for this method.
    {{#allParams}}
    {{^isBodyParam}}
    {{^isHeaderParam}}
    {{^isFormParam}}
    * @param options.parameters.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/isHeaderParam}}
    {{/isBodyParam}}
    {{/allParams}}
    * @param options.headers - An object literal of key value pairs of the headers to be sent with this request.
    {{#hasBodyParam}}
    * @param options.body - The data to send as the request body.
    {{/hasBodyParam}}
    {{^hasBodyParam}}
    {{#hasFormParams}}
    * @param options.body - The data to send as the request body.
    {{#formParams}}
    {{#isFormParam}}
    * @param options.body.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/formParams}}
    {{/hasFormParams}}
    {{/hasBodyParam}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    * 
    * @returns A promise of type Response if rawResponse is true, a promise of type {{{returnType}}}{{^returnType}}void{{/returnType}} otherwise.
    */
    {{nickname}}<T extends boolean>(
        options{{^hasBodyParam}}?{{/hasBodyParam}}: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
            {{#allParams}}
                {{^isBodyParam}}
                {{^isHeaderParam}}
                {{^isFormParam}}
                {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
                {{/isFormParam}}
                {{/isHeaderParam}}
                {{/isBodyParam}}
            {{/allParams}}
            } & QueryParameters, ConfigParameters>
            headers?: { [key: string]: string },
            {{#hasBodyParam}}
            {{#bodyParam}}
            body: {{{dataType}}} & CustomRequestBody
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            body: {{nickname}}BodyType & CustomRequestBody
            {{/hasFormParams}}
            {{/hasBodyParam}}
        }>,
        rawResponse?: T
    ): Promise<T extends true ? Response : {{{returnType}}}{{^returnType}}void{{/returnType}}>;

    /**
    * {{{unescapedNotes}}}
    *
    * @param options - An object containing the options for this method.
    * @param options.parameters - An object containing the parameters for this method.
    {{#allParams}}
    {{^isBodyParam}}
    {{^isHeaderParam}}
    {{^isFormParam}}
    * @param options.parameters.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/isHeaderParam}}    
    {{/isBodyParam}}
    {{/allParams}}
    * @param options.headers - An object literal of key value pairs of the headers to be sent with this request.
    {{#hasBodyParam}}
    * @param options.body - The data to send as the request body.
    {{/hasBodyParam}}
    {{^hasBodyParam}}
    {{#hasFormParams}}
    * @param options.body - The data to send as the request body.
    {{#formParams}}
    {{#isFormParam}}
    * @param options.body.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/formParams}}
    {{/hasFormParams}}
    {{/hasBodyParam}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    * 
    * @returns A promise of type Response if rawResponse is true, a promise of type {{{returnType}}}{{^returnType}}void{{/returnType}} otherwise.
    */
    async {{nickname}}(
        options{{^hasBodyParam}}?{{/hasBodyParam}}: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
            {{#allParams}}
                {{^isBodyParam}}
                {{^isHeaderParam}}
                {{^isFormParam}}
                {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
                {{/isFormParam}}
                {{/isHeaderParam}}
                {{/isBodyParam}}
            {{/allParams}}
            } & QueryParameters, ConfigParameters>,
            headers?: { [key: string]: string },
            {{#hasBodyParam}}
            {{#bodyParam}}
            body: {{{dataType}}} & CustomRequestBody
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            body: {{nickname}}BodyType & CustomRequestBody
            {{/hasFormParams}}
            {{/hasBodyParam}}
        }>,
        rawResponse?: boolean
    ): Promise<Response | {{{returnType}}}{{^returnType}}void{{/returnType}}> {
        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>["parameters"]>>);
        const configParams = this.clientConfig.parameters;
        
        const pathParams: {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}PathParameters & Required<BaseUriParameters> = {
          shortCode: configParams.shortCode,
        };

        {{#pathParams}}
        if (optionParams["{{paramName}}"] !== undefined) {
            pathParams["{{paramName}}"] = optionParams["{{paramName}}"];
        } else if (configParams["{{paramName}}"] !== undefined) {
            pathParams["{{paramName}}"] = configParams["{{paramName}}"];
        }
        {{#required}}
        else {
            throw new Error('Missing required path parameter: {{paramName}}');
        }
        {{/required}}
        {{/pathParams}}

        const queryParams: Partial<{{nickname}}QueryParameters> & QueryParameters = {};

        {{#queryParams}}
        if (optionParams["{{paramName}}"] !== undefined) {
            queryParams["{{paramName}}"] = optionParams["{{paramName}}"];
        } else if (configParams["{{paramName}}"] !== undefined) {
            queryParams["{{paramName}}"] = configParams["{{paramName}}"];
        }
        {{#required}}
        else {
            throw new Error('Missing required query parameter: {{paramName}}');
        }
        {{/required}}
        {{/queryParams}}

        Object.keys(optionParams).forEach((key) => {
            const paramValue = optionParams[key as keyof typeof optionParams];
            if(paramValue !== undefined && (key.startsWith('c_') || !((key in queryParams) || (key in pathParams)))) {
                if(!key.startsWith('c_')) {
                    console.warn(`Found unknown parameter for {{{nickname}}}: ${key}, adding as query parameter anyway`);
                }
                queryParams[key as keyof typeof queryParams] = paramValue;
            }
        })

        const url = new TemplateURL(
            "{{{path}}}",
            this.clientConfig.baseUri,
            {
                pathParams,
                queryParams,
                origin: this.clientConfig.proxy
            }
        );

        const headers: Record<string, string> = {
            {{#hasConsumes}}
            {{#consumes}}
            "Content-Type": "{{mediaType}}",
            {{/consumes}}
            {{/hasConsumes}}
            ...this.clientConfig.headers,
            ...options?.headers
        };

        if (!isBrowser) {
            // Browsers forbid setting a custom user-agent header
            headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(" ");
        }

        const response = await doFetch(
            url.toString(),
            {
                method: '{{httpMethod}}',
                headers,
                {{#hasBodyParam}}
                body: this.clientConfig.transformRequest(options{{^hasBodyParam}}?{{/hasBodyParam}}.body, headers)
                {{/hasBodyParam}}
                {{^hasBodyParam}}
                {{#hasFormParams}}
                body: this.clientConfig.transformRequest(options{{^hasBodyParam}}?{{/hasBodyParam}}.body, headers)
                {{/hasFormParams}}
                {{/hasBodyParam}}
            },
            this.clientConfig,
            rawResponse
        )

        {{^returnType}}
        if (rawResponse) {
            return response as Response;
        }
        {{/returnType}}
        {{#returnType}}
        return response as Response | {{{returnType}}};
        {{/returnType}}
    }
{{/x-scapi-internal}}
{{/vendorExtensions}}
{{^vendorExtensions}}

    /**
    * {{{unescapedNotes}}}
    *
    * If you would like to get a raw Response object use the other {{nickname}} function.
    *
    * @param options - An object containing the options for this method.
    * @param options.parameters - An object containing the parameters for this method.
    {{#allParams}}
    {{^isBodyParam}}
    {{^isHeaderParam}}
    {{^isFormParam}}
    * @param options.parameters.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/isHeaderParam}}
    {{/isBodyParam}}
    {{/allParams}}
    * @param options.headers - An object literal of key value pairs of the headers to be sent with this request.
    {{#hasBodyParam}}
    * @param options.body - The data to send as the request body.
    {{/hasBodyParam}}
    {{^hasBodyParam}}
    {{#hasFormParams}}
    * @param options.body - The data to send as the request body.
    {{#formParams}}
    {{#isFormParam}}
    * @param options.body.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/formParams}}
    {{/hasFormParams}}
    {{/hasBodyParam}}
    *
    * @returns A promise of type {{{returnType}}}{{^returnType}}void{{/returnType}}.
    */
    {{nickname}}(
        options{{^hasBodyParam}}?{{/hasBodyParam}}: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
            {{#allParams}}
            {{^isBodyParam}}
            {{^isHeaderParam}}
            {{^isFormParam}}
                {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
            {{/isFormParam}}
            {{/isHeaderParam}}
            {{/isBodyParam}}
            {{/allParams}}
            } & QueryParameters, ConfigParameters>
            headers?: { [key: string]: string },
            {{#hasBodyParam}}
            {{#bodyParam}}
            body: {{{dataType}}} & CustomRequestBody
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            body: {{nickname}}BodyType & CustomRequestBody
            {{/hasFormParams}}
            {{/hasBodyParam}}
        }>
    ): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}>;

    /**
    * {{{unescapedNotes}}}
    *
    * @param options - An object containing the options for this method.
    * @param options.parameters - An object containing the parameters for this method.
    {{#allParams}}
    {{^isBodyParam}}
    {{^isHeaderParam}}
    {{^isFormParam}}
    * @param options.parameters.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/isHeaderParam}}
    {{/isBodyParam}}
    {{/allParams}}
    * @param options.headers - An object literal of key value pairs of the headers to be sent with this request.
    {{#hasBodyParam}}
    * @param options.body - The data to send as the request body.
    {{/hasBodyParam}}
    {{^hasBodyParam}}
    {{#hasFormParams}}
    * @param options.body - The data to send as the request body.
    {{#formParams}}
    {{#isFormParam}}
    * @param options.body.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/formParams}}
    {{/hasFormParams}}
    {{/hasBodyParam}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    * 
    * @returns A promise of type Response if rawResponse is true, a promise of type {{{returnType}}}{{^returnType}}void{{/returnType}} otherwise.
    */
    {{nickname}}<T extends boolean>(
        options{{^hasBodyParam}}?{{/hasBodyParam}}: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
            {{#allParams}}
                {{^isBodyParam}}
                {{^isHeaderParam}}
                {{^isFormParam}}
                {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
                {{/isFormParam}}
                {{/isHeaderParam}}
                {{/isBodyParam}}
            {{/allParams}}
            } & QueryParameters, ConfigParameters>
            headers?: { [key: string]: string },
            {{#hasBodyParam}}
            {{#bodyParam}}
            body: {{{dataType}}} & CustomRequestBody
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            body: {{nickname}}BodyType & CustomRequestBody
            {{/hasFormParams}}
            {{/hasBodyParam}}
        }>,
        rawResponse?: T
    ): Promise<T extends true ? Response : {{{returnType}}}{{^returnType}}void{{/returnType}}>;

    /**
    * {{{unescapedNotes}}}
    *
    * @param options - An object containing the options for this method.
    * @param options.parameters - An object containing the parameters for this method.
    {{#allParams}}
    {{^isBodyParam}}
    {{^isHeaderParam}}
    {{^isFormParam}}
    * @param options.parameters.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/isHeaderParam}}    
    {{/isBodyParam}}
    {{/allParams}}
    * @param options.headers - An object literal of key value pairs of the headers to be sent with this request.
    {{#hasBodyParam}}
    * @param options.body - The data to send as the request body.
    {{/hasBodyParam}}
    {{^hasBodyParam}}
    {{#hasFormParams}}
    * @param options.body - The data to send as the request body.
    {{#formParams}}
    {{#isFormParam}}
    * @param options.body.{{{paramName}}} - {{{unescapedDescription}}}
    {{/isFormParam}}
    {{/formParams}}
    {{/hasFormParams}}
    {{/hasBodyParam}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    * 
    * @returns A promise of type Response if rawResponse is true, a promise of type {{{returnType}}}{{^returnType}}void{{/returnType}} otherwise.
    */
    async {{nickname}}(
        options{{^hasBodyParam}}?{{/hasBodyParam}}: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
            {{#allParams}}
                {{^isBodyParam}}
                {{^isHeaderParam}}
                {{^isFormParam}}
                {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^isDateTime}}{{^isDate}}{{{dataType}}}{{/isDate}}{{/isDateTime}}{{#isDateTime}}string{{/isDateTime}}{{#isDate}}string{{/isDate}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
                {{/isFormParam}}
                {{/isHeaderParam}}
                {{/isBodyParam}}
            {{/allParams}}
            } & QueryParameters, ConfigParameters>,
            headers?: { [key: string]: string },
            {{#hasBodyParam}}
            {{#bodyParam}}
            body: {{{dataType}}} & CustomRequestBody
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            body: {{nickname}}BodyType & CustomRequestBody
            {{/hasFormParams}}
            {{/hasBodyParam}}
        }>,
        rawResponse?: boolean
    ): Promise<Response | {{{returnType}}}{{^returnType}}void{{/returnType}}> {
        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>["parameters"]>>);
        const configParams = this.clientConfig.parameters;
        
        const pathParams: {{#lambda.titlecase}}{{#lambda.camelcase}}{{appName}}{{/lambda.camelcase}}{{/lambda.titlecase}}PathParameters & Required<BaseUriParameters> = {
          shortCode: configParams.shortCode,
        };

        {{#pathParams}}
        if (optionParams["{{paramName}}"] !== undefined) {
            pathParams["{{paramName}}"] = optionParams["{{paramName}}"];
        } else if (configParams["{{paramName}}"] !== undefined) {
            pathParams["{{paramName}}"] = configParams["{{paramName}}"];
        }
        {{#required}}
        else {
            throw new Error('Missing required path parameter: {{paramName}}');
        }
        {{/required}}
        {{/pathParams}}

        const queryParams: Partial<{{nickname}}QueryParameters> & QueryParameters = {};

        {{#queryParams}}
        if (optionParams["{{paramName}}"] !== undefined) {
            queryParams["{{paramName}}"] = optionParams["{{paramName}}"];
        } else if (configParams["{{paramName}}"] !== undefined) {
            queryParams["{{paramName}}"] = configParams["{{paramName}}"];
        }
        {{#required}}
        else {
            throw new Error('Missing required query parameter: {{paramName}}');
        }
        {{/required}}
        {{/queryParams}}

        Object.keys(optionParams).forEach((key) => {
            const paramValue = optionParams[key as keyof typeof optionParams];
            if(paramValue !== undefined && (key.startsWith('c_') || !((key in queryParams) || (key in pathParams)))) {
                if(!key.startsWith('c_')) {
                    console.warn(`Found unknown parameter for {{{nickname}}}: ${key}, adding as query parameter anyway`);
                }
                queryParams[key as keyof typeof queryParams] = paramValue;
            }
        })

        const url = new TemplateURL(
            "{{{path}}}",
            this.clientConfig.baseUri,
            {
                pathParams,
                queryParams,
                origin: this.clientConfig.proxy
            }
        );

        const headers: Record<string, string> = {
            {{#hasConsumes}}
            {{#consumes}}
            "Content-Type": "{{mediaType}}",
            {{/consumes}}
            {{/hasConsumes}}
            ...this.clientConfig.headers,
            ...options?.headers
        };

        if (!isBrowser) {
            // Browsers forbid setting a custom user-agent header
            headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(" ");
        }

        const response = await doFetch(
            url.toString(),
            {
                method: '{{httpMethod}}',
                headers,
                {{#hasBodyParam}}
                body: this.clientConfig.transformRequest(options{{^hasBodyParam}}?{{/hasBodyParam}}.body, headers)
                {{/hasBodyParam}}
                {{^hasBodyParam}}
                {{#hasFormParams}}
                body: this.clientConfig.transformRequest(options{{^hasBodyParam}}?{{/hasBodyParam}}.body, headers)
                {{/hasFormParams}}
                {{/hasBodyParam}}
            },
            this.clientConfig,
            rawResponse
        )

        {{^returnType}}
        if (rawResponse) {
            return response as Response;
        }
        {{/returnType}}
        {{#returnType}}
        return response as Response | {{{returnType}}};
        {{/returnType}}
    }
{{/vendorExtensions}}
{{/operation}}
{{/operations}}
}
